@page "/authorize"
@using Microsoft.AspNetCore.WebUtilities
@inject IConfiguration Configuration
@inject NavigationManager Nav
@inject HttpClient Http
@inject TwitchUser User

<dl>
  <dt>Access Token:</dt>
  <dd>@AccessToken</dd>
</dl>

<b>User Data:</b>

@if (User != null) {
<dl>
  <dt>Id:</dt>
  <dd>@User.TwitchId</dd>
  <dt>Display Name:</dt>
  <dd>@User.DisplayName</dd>
  <dt>Picture</dt>
  <dd><img src="@User.PictureUri?.ToString()" /></dd>
</dl>
}

@code {

  protected string AccessToken;

  protected string UserData;

  protected override async Task OnInitializedAsync()
  {

    await GetTokens();

    await GetUserInfo();

    await base.OnInitializedAsync();

  }

  public async Task GetTokens() {

		var thisUri = new Uri(Nav.Uri);
		var port = thisUri.IsDefaultPort ? "" : (":" + thisUri.Port);
		var redirect = new Uri (new Uri(thisUri.Scheme + "://" + thisUri.Host + port), "/authorize");

    var code = QueryHelpers.ParseQuery(thisUri.Query).GetValueOrDefault("code");
    if (string.IsNullOrEmpty(code)) return;

    var results = await Http.GetFromJsonAsync<TwitchToken>($"api/auth?code={code}&redirect_uri={redirect}");

    User.AccessToken = results.access_token;
    User.RefreshToken = results.refresh_token;
    User.ExpiresIn = results.expires_in;

  }

  public async Task GetUserInfo()
  {

    if (User.AccessToken == string.Empty) return;

//    Http.DefaultRequestHeaders.Add("Accept", "application/vnd.twitchtv.v5+json");
    Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {User.AccessToken}");
    Http.DefaultRequestHeaders.Add("Client-ID", Configuration["twitch.clientid"]);
    var response = await Http.GetFromJsonAsync<TwitchUserProfiles>("https://api.twitch.tv/helix/users");
    var thisProfile = response.data.First();

    User.PictureUri = new Uri(thisProfile.profile_image_url);
    User.TwitchId = thisProfile.id;
    User.DisplayName = thisProfile.display_name;

    User.Updated();
    Nav.NavigateTo("/");

  }

}
