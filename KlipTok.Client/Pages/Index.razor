@page "/"
@inject HttpClient Http
@inject TwitchUser user  
@inject IJSRuntime js

<div class="grid-container">
	<div id="followSidebar">
		<h3>Following:</h3>
		<ul>
			<li>pharewings</li>
			<li>FierceKittenz</li>
			<li>VisualStudio</li>
			<li>roberttables</li>
			<li>MrDemonWolf</li>
		</ul>
	</div>
	<main>

		<Virtualize Context="clip" Items="@Clips"> 
			@*ItemsProvider="@GetClips" OverscanCount="2" ItemSize="400"> *@
			
			<ItemContent>
				<CascadingValue Name="Width" Value="@width">
					<Clip ClipData="@clip"></Clip>
				</CascadingValue>
			</ItemContent>
			
			<Placeholder>
				Loading...
			</Placeholder>

		</Virtualize>

	</main>
</div>

@code {

	int width = 0;
	// int totalClips = 50;

	protected Models.Clip[] Clips = new Models.Clip[] { };

	protected override async Task OnInitializedAsync()
	{

		width = await js.InvokeAsync<int>("window.Page.getWidth");

		Clips = (await Http.GetFromJsonAsync<IEnumerable<Models.Clip>>($"/api/GetClips?twitchuserid={user.TwitchId}&startIndex=0&numclips=20")).ToArray();

		await base.OnInitializedAsync();

	}

	//private async ValueTask<ItemsProviderResult<Models.Clip>> GetClips(
	//	ItemsProviderRequest request)
	//{
	//	var numClips = Math.Min(request.Count, totalClips - request.StartIndex);
	//	var clips = await Http.GetFromJsonAsync<IEnumerable<Models.Clip>>($"/api/GetClips?twitchuserid={user.TwitchId}&startIndex={request.StartIndex}&numclips={numClips}");

	//	return new ItemsProviderResult<Models.Clip>(clips, totalClips);
	//}

}